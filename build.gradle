plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://maven.terraformersmc.com/" } // Modmenu, EMI
	maven { url = "https://maven.nucleoid.xyz/" } // Common Protection API
	maven { url = "https://maven.blamejared.com" } // JEI
	maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release/" } // Entity Reach Attribute
	maven { url = "https://api.modrinth.com/maven" } // Revelationary, Additional Entity Attributes, Fractal Lib, Colorful Hearts, idwtialsimmoedm
	maven { url = "https://cfa2.cursemaven.com" }
	maven { url = "https://repo.unascribed.com" } // Ears API
	maven { url = "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/" } // Modonomicon
	maven { url = "https://maven.is-immensely.gay/" } // Matchbooks
	maven { url = "https://jitpack.io" } // Arrowhead, Dimensional Reverb, Step Height Entity Attribute
	mavenCentral()
}

dependencies {
	// jetbrains annotations
	implementation ("org.jetbrains:annotations:24.0.1")

	// graph api and its dependencies
	implementation include("org.jgrapht:jgrapht-core:1.5.1")
	implementation include("org.jheaps:jheaps:0.13")

	// Some other dependency is adding annotations, and it throws an error without this
	compileOnly ("com.demonwav.mcdev:annotations:1.0")

	// minecraft, fabric & api
	minecraft ("com.mojang:minecraft:${project.minecraft_version}")
	mappings ("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")
	modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	// mine
	modImplementation ("maven.modrinth:exclusions-lib:${project.exclusionslib_version}")
	modImplementation ("maven.modrinth:Revelationary:${project.revelationary_version}")
	modImplementation include("maven.modrinth:AdditionalEntityAttributes:${project.additional_entity_attributes_version}")
	modImplementation include("com.github.DaFuqs:Arrowhead:${project.arrowhead_version}")
	modImplementation include("com.github.DaFuqs:DimensionalReverb:${project.dimensional_reverb_version}")
	modImplementation include("maven.modrinth:fractal-lib:${project.fractal_version}")
	modImplementation include("com.github.Noaaan:Matchbooks:${project.matchbooks_version}")

	// external and compat
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modApi("dev.architectury:architectury-fabric:${project.architectury_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
	modImplementation("eu.pb4:common-protection-api:${project.cpa_version}")
	modImplementation("dev.emi:trinkets:${project.trinkets_version}") // https://github.com/emilyploszaj/trinkets
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
	// https://github.com/shedaniel/RoughlyEnoughItems
	modCompileOnly("dev.emi:emi-fabric:${emi_version}") // https://github.com/emilyploszaj/emi
	// https://github.com/klikli-dev/modonomicon
	modImplementation("com.klikli_dev:modonomicon-${project.minecraft_version}-fabric:${project.modonomicon_version}") { exclude(group: "com.klikli_dev") }

	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
		case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
		case "disabled": break
		default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI or disabled.")
	}

	// https://github.com/OnyxStudios/Cardinal-Components-API/wiki/
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cca_version}")

	modImplementation include("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attribute_version}")
	modImplementation include("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")

	// shipped with FAPI
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))

	// Connect to local dev servers
	modLocalRuntime("maven.modrinth:auth-me:${project.auth_me_version}")

	// Mod Compat
	modCompileOnly("maven.modrinth:colorful-hearts:${project.colorful_hearts_version}") { transitive = false }
	modCompileOnly("maven.modrinth:sodium:${project.sodium_version}") { transitive = false }
	modCompileOnly("com.unascribed:ears-api:${project.ears_version}")
	modCompileOnly("maven.modrinth:create-fabric:${project.create_version}") { transitive = false }
	modCompileOnly("maven.modrinth:neepmeat:${project.neepmeat_version}") { transitive = false }
	// modCompileOnly("maven.modrinth:enchantment-descriptions:${project.enchantment_descriptions_version}")
	modCompileOnly("maven.modrinth:travelersbackpack:${project.travelers_backpack_version}")
	modCompileOnly("maven.modrinth:botania:${project.botania_version}")
	modImplementation("maven.modrinth:idwtialsimmoedm:${project.idwtialsimmoedm_version}")
}

loom {
	accessWidenerPath = file("src/main/resources/spectrum.accesswidener")

	runs {
		datagen {
			server()

			name "Minecraft Data"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

			runDir "build/datagen"
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE.md") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			name "sapphoCompany"
			url = "https://maven.is-immensely.gay/releases"
			credentials {
				username = "dafuqs"
				password = System.getenv("MAVEN_PASS")
			}
		}
	}
}
